package nonverblaster{		import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.*;	import flash.net.URLRequest;	import flash.external.*;	import flash.system.Security;		public class YouTube extends MovieClip {		// This will hold the API player instance once it is initialized.		var player						:Object;		var loader						:Loader = new Loader();				public function YouTube() {			if(stage != null){				stage.scaleMode = "noScale";				stage.align = "TL";			}			Security.allowDomain("*");			loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);			loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));			addChild(loader);		}		function onLoaderInit(event:Event):void {			loader.content.addEventListener("onReady", onPlayerReady);			loader.content.addEventListener("onError", onPlayerError);			loader.content.addEventListener("onStateChange", onPlayerStateChange);			loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);		}		function onPlayerReady(event:Event):void {			// Event.data contains the event parameter, which is the Player API ID 			trace("player ready:", Object(event).data);			// Once this event has been dispatched by the player, we can use			// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl			// to load a particular YouTube video.			player = loader.content;			player.cueVideoById("VjihaK7HfGs", 0, true);			player.setSize(stage.stageWidth, stage.stageHeight);			//log(player.getSize());			log("Player Loaded!");			visible = true;		}		function onPlayerError(event:Event):void {			// Event.data contains the event parameter, which is the error code			trace("player error:", Object(event).data);		}		function onPlayerStateChange(event:Event):void {			// Event.data contains the event parameter, which is the new player state			trace("player state:", Object(event).data);			loader.visible = true;			if(Object(event).data == 1){				log("Video duration: " + player.getDuration());			}		}		function onVideoPlaybackQualityChange(event:Event):void {			// Event.data contains the event parameter, which is the new video quality			trace("video quality:", Object(event).data);		}		function log(msg){			trace(msg);			ExternalInterface.call("trace", msg);		}		//		// Controlling Functions		//		public function startPlayback(){			if(player != null){				player.playVideo();			}		}		public function setDefault(){			if(player != null){				player.seekTo(0);				player.pauseVideo();			}		}		//		//		// Get-Set Functions		//		public function getPlayingProgress():Number{			return(player.getCurrentTime() / getDuration());		}		public function getLoadingProgress():Number {			return(player.getVideoBytesLoaded() / player.getVideoBytesTotal());		}		public function getTime():Number {			return(player.getCurrentTime());		}		public function getDuration():Number {			return(player.getDuration());		}		public function setPlayingProgress(progressBarScale):void {			player.seekTo(progressBarScale * getDuration());		}				public function setSoundTransform(st){			if(player != null){				player.setVolume(st.volume);			}		}		public function getVolume():Number{			return(player.getVolume());		}	}}